<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8"/>
		<link href="style.css" rel="stylesheet" type="text/css"/>
		<style>
		.colorpicker {
			width: 356px;
			height: 176px;
			overflow: hidden;
			position: absolute;
			background-image:url("http://i.luwe.fr/3e119281.png");
			font-family: Arial, Helvetica, sans-serif;
			display: inline-block !important;
		}
		.colorpicker_color {
			width: 150px;
			height: 150px;
			left: 14px;
			top: 13px;
			position: absolute;
			background: #f00;
			overflow: hidden;
			cursor: crosshair;
		}
		.colorpicker_color div {
			position: absolute;
			top: 0;
			left: 0;
			width: 150px;
			height: 150px;
			background: url("http://i.luwe.fr/0695a0a9.png");
		}
		.colorpicker_color div div {
			position: absolute;
			top: 0;
			left: 0;
			width: 11px;
			height: 11px;
			overflow: hidden;
			background: url("http://i.luwe.fr/6e3422d6.png");
			margin: -5px 0 0 -5px;
		}
		.colorpicker_hue {
			position: absolute;
			top: 13px;
			left: 171px;
			width: 35px;
			height: 150px;
			cursor: n-resize;
		}
		.colorpicker_hue div {
			position: absolute;
			width: 35px;
			height: 9px;
			overflow: hidden;
			background: url("http://i.luwe.fr/18162563.png") left top;
			margin: -4px 0 0 0;
			left: 0px;
		}
		.colorpicker_new_color {
			position: absolute;
			width: 60px;
			height: 30px;
			left: 213px;
			top: 13px;
			background: #f00;
		}
		.colorpicker_current_color {
			position: absolute;
			width: 60px;
			height: 30px;
			left: 283px;
			top: 13px;
			background: #f00;
		}
		.colorpicker input {
			background-color: transparent;
			border: 1px solid transparent;
			position: absolute;
			font-size: 10px;
			font-family: Arial, Helvetica, sans-serif;
			color: #898989;
			top: 4px;
			right: 11px;
			text-align: right;
			margin: 0;
			padding: 0;
			height: 11px;
		}
		.colorpicker_hex {
			position: absolute;
			width: 72px;
			height: 22px;
			background: url("http://i.luwe.fr/1bfae583.png") top;
			left: 212px;
			top: 142px;
		}
		.colorpicker_hex input {
			right: 6px;
		}
		.colorpicker_field {
			height: 22px;
			width: 62px;
			background-position: top;
			position: absolute;
		}
		.colorpicker_field span {
			position: absolute;
			width: 12px;
			height: 22px;
			overflow: hidden;
			top: 0;
			right: 0;
			cursor: n-resize;
		}
		.colorpicker_rgb_r {
			background-image: url("http://i.luwe.fr/bfdb9648.png");
			top: 52px;
			left: 212px;
		}
		.colorpicker_rgb_g {
			background-image: url("http://i.luwe.fr/f9f14955.png");
			top: 82px;
			left: 212px;
		}
		.colorpicker_rgb_b {
			background-image: url("http://i.luwe.fr/31cadbcd.png");
			top: 112px;
			left: 212px;
		}
		.colorpicker_hsb_h {
			background-image: url("http://i.luwe.fr/5bae333a.png");
			top: 52px;
			left: 282px;
		}
		.colorpicker_hsb_s {
			background-image: url("http://i.luwe.fr/2dda6370.png");
			top: 82px;
			left: 282px;
		}
		.colorpicker_hsb_b {
			background-image: url("http://i.luwe.fr/ab5774ab.png");
			top: 112px;
			left: 282px;
		}
		.colorpicker_submit {
			position: absolute;
			width: 22px;
			height: 22px;
			background: url("http://i.luwe.fr/44ecfe04.png") top;
			left: 322px;
			top: 142px;
			overflow: hidden;
		}
		.colorpicker_focus {
			background-position: center;
		}
		.colorpicker_hex.colorpicker_focus {
			background-position: bottom;
		}
		.colorpicker_submit.colorpicker_focus {
			background-position: bottom;
		}
		.colorpicker_slider {
			background-position: bottom;
		}
		</style>
		<script src="https://code.jquery.com/jquery-2.2.3.min.js"></script>
		<script>
		(function ($){
		  var check=false, isRelative=true;

		  $.elementFromPoint = function(x,y)
		  {
			if(!document.elementFromPoint) return null;

			if(!check)
			{
			  var sl;
			  if((sl = $(document).scrollTop()) >0)
			  {
			   isRelative = (document.elementFromPoint(0, sl + $(window).height() -1) == null);
			  }
			  else if((sl = $(document).scrollLeft()) >0)
			  {
			   isRelative = (document.elementFromPoint(sl + $(window).width() -1, 0) == null);
			  }
			  check = (sl>0);
			}

			if(!isRelative)
			{
			  x += $(document).scrollLeft();
			  y += $(document).scrollTop();
			}

			return document.elementFromPoint(x,y);
		  }	

		})(jQuery);
		/**
		 * jQuery Nearest plugin v1.4.0
		 *
		 * Finds elements closest to a single point based on screen location and pixel dimensions
		 * http://gilmoreorless.github.io/jquery-nearest/
		 * Copyright (c) 2011-2015 Gilmore Davidson under the MIT licence:
		 *   http://gilmoreorless.github.io/jquery-nearest/LICENSE.txt
		 *
		 * Requires jQuery 1.4 or above
		 * Also supports Ben Alman's "each2" plugin for faster looping (if available)
		 */
		!function(t,e){function r(e,r,o){e||(e="div");var s,a,h,u=t(r.container),c=u.offset()||{left:0,top:0},f=[u.width()||0,u.height()||0],d={x:[c.left,c.left+f[0]],y:[c.top,c.top+f[1]],w:[0,f[0]],h:[0,f[1]]},l=r.directionConstraints;for(s in d)d.hasOwnProperty(s)&&(h=i.exec(r[s]),h&&(a=d[s],r[s]=(a[1]-a[0])*h[1]/100+a[0]));t.isArray(l)||(l="string"==typeof l?[l]:[]),r.sameX===!1&&r.checkHoriz===!1&&(r.sameX=!r.checkHoriz),r.sameY===!1&&r.checkVert===!1&&(r.sameY=!r.checkVert);var y=u.find(e),p=[],x=!!r.furthest,m=!r.sameX,v=!r.sameY,g=!!r.onlyX,k=!!r.onlyY,w=x?0:1/0,X=parseFloat(r.x)||0,Y=parseFloat(r.y)||0,F=parseFloat(X+r.w)||X,S=parseFloat(Y+r.h)||Y,H={x1:X,y1:Y,x2:F,y2:S},M=parseFloat(r.tolerance)||0,b=!!t.fn.each2,j=Math.min,z=Math.max;!r.includeSelf&&o&&(y=y.not(o)),0>M&&(M=0),y[b?"each2":"each"](function(e,r){var i,o,s,a,h=b?r:t(this),u=h.offset(),c=u.left,f=u.top,d=h.outerWidth(),y=h.outerHeight(),C=c+d,O=f+y,P=z(c,X),V=j(C,F),W=z(f,Y),q=j(O,S),A={x1:c,y1:f,x2:C,y2:O},Q=V>=P,$=q>=W;(m&&v||!m&&!v&&Q&&$||m&&$||v&&Q||m&&g||v&&k)&&(i=Q?0:P-V,o=$?0:W-q,s=g||k?g?i:o:Q||$?z(i,o):Math.sqrt(i*i+o*o),a=x?s>=w-M:w+M>=s,n(H,A,l)||(a=!1),a&&(w=x?z(w,s):j(w,s),p.push({node:this,dist:s})))}),"nearest"===r.sort?p.sort(function(t,e){return t.dist-e.dist}):"furthest"===r.sort&&p.sort(function(t,e){return e.dist-t.dist});var C,O,P,V,W=p.length,q=[];if(W)for(x?(C=w-M,O=w):(C=w,O=w+M),P=0;W>P;P++)V=p[P],V.dist>=C&&V.dist<=O&&q.push(V.node);return q}function n(t,e,r){var n={left:t.x1>e.x1,right:t.x2<e.x2,top:t.y1>e.y1,bottom:t.y2<e.y2};return r.reduce(function(t,e){return t&&!!n[e]},!0)}var i=/^([\d.]+)%$/;t.each(["nearest","furthest","touching"],function(n,i){var o={x:0,y:0,w:0,h:0,tolerance:1,container:document,furthest:"furthest"==i,includeSelf:!1,sameX:"touching"===i,sameY:"touching"===i,onlyX:!1,onlyY:!1,directionConstraints:[],sort:!1};t[i]=function(n,i,s){if(!n||n.x===e||n.y===e)return t([]);var a=t.extend({},o,n,s||{});return t(r(i,a))},t.fn[i]=function(e,n){if(!this.length)return this.pushStack([]);var i;if(e&&t.isPlainObject(e))return i=t.extend({},o,e,n||{}),this.pushStack(r(this,i));var s=this.offset(),a={x:s.left,y:s.top,w:this.outerWidth(),h:this.outerHeight()};return i=t.extend({},o,a,n||{}),this.pushStack(r(e,i,this))}})}(jQuery);

		/**
		 *
		 * Color picker
		 * Author: Stefan Petre www.eyecon.ro
		 * 
		 * Dual licensed under the MIT and GPL licenses
		 * 
		 */
		(function ($) {
			var ColorPicker = function () {
				var
					ids = {},
					inAction,
					charMin = 65,
					visible,
					tpl = '<div class="colorpicker"><div class="colorpicker_color"><div><div></div></div></div><div class="colorpicker_hue"><div></div></div><div class="colorpicker_new_color"></div><div class="colorpicker_current_color"></div><div class="colorpicker_hex"><input type="text" maxlength="6" size="6" /></div><div class="colorpicker_rgb_r colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_g colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_h colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_s colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_submit"></div></div>',
					defaults = {
						eventName: 'click',
						onShow: function () {},
						onBeforeShow: function(){},
						onHide: function () {},
						onChange: function () {},
						onSubmit: function () {},
						color: 'ff0000',
						livePreview: true,
						flat: false
					},
					fillRGBFields = function  (hsb, cal) {
						var rgb = HSBToRGB(hsb);
						$(cal).data('colorpicker').fields
							.eq(1).val(rgb.r).end()
							.eq(2).val(rgb.g).end()
							.eq(3).val(rgb.b).end();
					},
					fillHSBFields = function  (hsb, cal) {
						$(cal).data('colorpicker').fields
							.eq(4).val(hsb.h).end()
							.eq(5).val(hsb.s).end()
							.eq(6).val(hsb.b).end();
					},
					fillHexFields = function (hsb, cal) {
						$(cal).data('colorpicker').fields
							.eq(0).val(HSBToHex(hsb)).end();
					},
					setSelector = function (hsb, cal) {
						$(cal).data('colorpicker').selector.css('backgroundColor', '#' + HSBToHex({h: hsb.h, s: 100, b: 100}));
						$(cal).data('colorpicker').selectorIndic.css({
							left: parseInt(150 * hsb.s/100, 10),
							top: parseInt(150 * (100-hsb.b)/100, 10)
						});
					},
					setHue = function (hsb, cal) {
						$(cal).data('colorpicker').hue.css('top', parseInt(150 - 150 * hsb.h/360, 10));
					},
					setCurrentColor = function (hsb, cal) {
						$(cal).data('colorpicker').currentColor.css('backgroundColor', '#' + HSBToHex(hsb));
					},
					setNewColor = function (hsb, cal) {
						$(cal).data('colorpicker').newColor.css('backgroundColor', '#' + HSBToHex(hsb));
					},
					keyDown = function (ev) {
						var pressedKey = ev.charCode || ev.keyCode || -1;
						if ((pressedKey > charMin && pressedKey <= 90) || pressedKey == 32) {
							return false;
						}
						var cal = $(this).parent().parent();
						if (cal.data('colorpicker').livePreview === true) {
							change.apply(this);
						}
					},
					change = function (ev) {
						var cal = $(this).parent().parent(), col;
						if (this.parentNode.className.indexOf('_hex') > 0) {
							cal.data('colorpicker').color = col = HexToHSB(fixHex(this.value));
						} else if (this.parentNode.className.indexOf('_hsb') > 0) {
							cal.data('colorpicker').color = col = fixHSB({
								h: parseInt(cal.data('colorpicker').fields.eq(4).val(), 10),
								s: parseInt(cal.data('colorpicker').fields.eq(5).val(), 10),
								b: parseInt(cal.data('colorpicker').fields.eq(6).val(), 10)
							});
						} else {
							cal.data('colorpicker').color = col = RGBToHSB(fixRGB({
								r: parseInt(cal.data('colorpicker').fields.eq(1).val(), 10),
								g: parseInt(cal.data('colorpicker').fields.eq(2).val(), 10),
								b: parseInt(cal.data('colorpicker').fields.eq(3).val(), 10)
							}));
						}
						if (ev) {
							fillRGBFields(col, cal.get(0));
							fillHexFields(col, cal.get(0));
							fillHSBFields(col, cal.get(0));
						}
						setSelector(col, cal.get(0));
						setHue(col, cal.get(0));
						setNewColor(col, cal.get(0));
						cal.data('colorpicker').onChange.apply(cal, [col, HSBToHex(col), HSBToRGB(col)]);
					},
					blur = function (ev) {
						var cal = $(this).parent().parent();
						cal.data('colorpicker').fields.parent().removeClass('colorpicker_focus');
					},
					focus = function () {
						charMin = this.parentNode.className.indexOf('_hex') > 0 ? 70 : 65;
						$(this).parent().parent().data('colorpicker').fields.parent().removeClass('colorpicker_focus');
						$(this).parent().addClass('colorpicker_focus');
					},
					downIncrement = function (ev) {
						var field = $(this).parent().find('input').focus();
						var current = {
							el: $(this).parent().addClass('colorpicker_slider'),
							max: this.parentNode.className.indexOf('_hsb_h') > 0 ? 360 : (this.parentNode.className.indexOf('_hsb') > 0 ? 100 : 255),
							y: ev.pageY,
							field: field,
							val: parseInt(field.val(), 10),
							preview: $(this).parent().parent().data('colorpicker').livePreview					
						};
						$(document).bind('mouseup', current, upIncrement);
						$(document).bind('mousemove', current, moveIncrement);
					},
					moveIncrement = function (ev) {
						ev.data.field.val(Math.max(0, Math.min(ev.data.max, parseInt(ev.data.val + ev.pageY - ev.data.y, 10))));
						if (ev.data.preview) {
							change.apply(ev.data.field.get(0), [true]);
						}
						return false;
					},
					upIncrement = function (ev) {
						change.apply(ev.data.field.get(0), [true]);
						ev.data.el.removeClass('colorpicker_slider').find('input').focus();
						$(document).unbind('mouseup', upIncrement);
						$(document).unbind('mousemove', moveIncrement);
						return false;
					},
					downHue = function (ev) {
						var current = {
							cal: $(this).parent(),
							y: $(this).offset().top
						};
						current.preview = current.cal.data('colorpicker').livePreview;
						$(document).bind('mouseup', current, upHue);
						$(document).bind('mousemove', current, moveHue);
					},
					moveHue = function (ev) {
						change.apply(
							ev.data.cal.data('colorpicker')
								.fields
								.eq(4)
								.val(parseInt(360*(150 - Math.max(0,Math.min(150,(ev.pageY - ev.data.y))))/150, 10))
								.get(0),
							[ev.data.preview]
						);
						return false;
					},
					upHue = function (ev) {
						fillRGBFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
						fillHexFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
						$(document).unbind('mouseup', upHue);
						$(document).unbind('mousemove', moveHue);
						return false;
					},
					downSelector = function (ev) {
						var current = {
							cal: $(this).parent(),
							pos: $(this).offset()
						};
						current.preview = current.cal.data('colorpicker').livePreview;
						$(document).bind('mouseup', current, upSelector);
						$(document).bind('mousemove', current, moveSelector);
					},
					moveSelector = function (ev) {
						change.apply(
							ev.data.cal.data('colorpicker')
								.fields
								.eq(6)
								.val(parseInt(100*(150 - Math.max(0,Math.min(150,(ev.pageY - ev.data.pos.top))))/150, 10))
								.end()
								.eq(5)
								.val(parseInt(100*(Math.max(0,Math.min(150,(ev.pageX - ev.data.pos.left))))/150, 10))
								.get(0),
							[ev.data.preview]
						);
						return false;
					},
					upSelector = function (ev) {
						fillRGBFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
						fillHexFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
						$(document).unbind('mouseup', upSelector);
						$(document).unbind('mousemove', moveSelector);
						return false;
					},
					enterSubmit = function (ev) {
						$(this).addClass('colorpicker_focus');
					},
					leaveSubmit = function (ev) {
						$(this).removeClass('colorpicker_focus');
					},
					clickSubmit = function (ev) {
						var cal = $(this).parent();
						var col = cal.data('colorpicker').color;
						cal.data('colorpicker').origColor = col;
						setCurrentColor(col, cal.get(0));
						cal.data('colorpicker').onSubmit(col, HSBToHex(col), HSBToRGB(col), cal.data('colorpicker').el);
					},
					show = function (ev) {
						var cal = $('#' + $(this).data('colorpickerId'));
						cal.data('colorpicker').onBeforeShow.apply(this, [cal.get(0)]);
						var pos = $(this).offset();
						var viewPort = getViewport();
						var top = pos.top + this.offsetHeight;
						var left = pos.left;
						if (top + 176 > viewPort.t + viewPort.h) {
							top -= this.offsetHeight + 176;
						}
						if (left + 356 > viewPort.l + viewPort.w) {
							left -= 356;
						}
						cal.css({left: left + 'px', top: top + 'px'});
						if (cal.data('colorpicker').onShow.apply(this, [cal.get(0)]) != false) {
							cal.show();
						}
						$(document).bind('mousedown', {cal: cal}, hide);
						return false;
					},
					hide = function (ev) {
						if (!isChildOf(ev.data.cal.get(0), ev.target, ev.data.cal.get(0))) {
							if (ev.data.cal.data('colorpicker').onHide.apply(this, [ev.data.cal.get(0)]) != false) {
								ev.data.cal.hide();
							}
							$(document).unbind('mousedown', hide);
						}
					},
					isChildOf = function(parentEl, el, container) {
						if (parentEl == el) {
							return true;
						}
						if (parentEl.contains) {
							return parentEl.contains(el);
						}
						if ( parentEl.compareDocumentPosition ) {
							return !!(parentEl.compareDocumentPosition(el) & 16);
						}
						var prEl = el.parentNode;
						while(prEl && prEl != container) {
							if (prEl == parentEl)
								return true;
							prEl = prEl.parentNode;
						}
						return false;
					},
					getViewport = function () {
						var m = document.compatMode == 'CSS1Compat';
						return {
							l : window.pageXOffset || (m ? document.documentElement.scrollLeft : document.body.scrollLeft),
							t : window.pageYOffset || (m ? document.documentElement.scrollTop : document.body.scrollTop),
							w : window.innerWidth || (m ? document.documentElement.clientWidth : document.body.clientWidth),
							h : window.innerHeight || (m ? document.documentElement.clientHeight : document.body.clientHeight)
						};
					},
					fixHSB = function (hsb) {
						return {
							h: Math.min(360, Math.max(0, hsb.h)),
							s: Math.min(100, Math.max(0, hsb.s)),
							b: Math.min(100, Math.max(0, hsb.b))
						};
					}, 
					fixRGB = function (rgb) {
						return {
							r: Math.min(255, Math.max(0, rgb.r)),
							g: Math.min(255, Math.max(0, rgb.g)),
							b: Math.min(255, Math.max(0, rgb.b))
						};
					},
					fixHex = function (hex) {
						var len = 6 - hex.length;
						if (len > 0) {
							var o = [];
							for (var i=0; i<len; i++) {
								o.push('0');
							}
							o.push(hex);
							hex = o.join('');
						}
						return hex;
					}, 
					HexToRGB = function (hex) {
						var hex = parseInt(((hex.indexOf('#') > -1) ? hex.substring(1) : hex), 16);
						return {r: hex >> 16, g: (hex & 0x00FF00) >> 8, b: (hex & 0x0000FF)};
					},
					HexToHSB = function (hex) {
						return RGBToHSB(HexToRGB(hex));
					},
					RGBToHSB = function (rgb) {
						var hsb = {
							h: 0,
							s: 0,
							b: 0
						};
						var min = Math.min(rgb.r, rgb.g, rgb.b);
						var max = Math.max(rgb.r, rgb.g, rgb.b);
						var delta = max - min;
						hsb.b = max;
						if (max != 0) {
							
						}
						hsb.s = max != 0 ? 255 * delta / max : 0;
						if (hsb.s != 0) {
							if (rgb.r == max) {
								hsb.h = (rgb.g - rgb.b) / delta;
							} else if (rgb.g == max) {
								hsb.h = 2 + (rgb.b - rgb.r) / delta;
							} else {
								hsb.h = 4 + (rgb.r - rgb.g) / delta;
							}
						} else {
							hsb.h = -1;
						}
						hsb.h *= 60;
						if (hsb.h < 0) {
							hsb.h += 360;
						}
						hsb.s *= 100/255;
						hsb.b *= 100/255;
						return hsb;
					},
					HSBToRGB = function (hsb) {
						var rgb = {};
						var h = Math.round(hsb.h);
						var s = Math.round(hsb.s*255/100);
						var v = Math.round(hsb.b*255/100);
						if(s == 0) {
							rgb.r = rgb.g = rgb.b = v;
						} else {
							var t1 = v;
							var t2 = (255-s)*v/255;
							var t3 = (t1-t2)*(h%60)/60;
							if(h==360) h = 0;
							if(h<60) {rgb.r=t1;	rgb.b=t2; rgb.g=t2+t3}
							else if(h<120) {rgb.g=t1; rgb.b=t2;	rgb.r=t1-t3}
							else if(h<180) {rgb.g=t1; rgb.r=t2;	rgb.b=t2+t3}
							else if(h<240) {rgb.b=t1; rgb.r=t2;	rgb.g=t1-t3}
							else if(h<300) {rgb.b=t1; rgb.g=t2;	rgb.r=t2+t3}
							else if(h<360) {rgb.r=t1; rgb.g=t2;	rgb.b=t1-t3}
							else {rgb.r=0; rgb.g=0;	rgb.b=0}
						}
						return {r:Math.round(rgb.r), g:Math.round(rgb.g), b:Math.round(rgb.b)};
					},
					RGBToHex = function (rgb) {
						var hex = [
							rgb.r.toString(16),
							rgb.g.toString(16),
							rgb.b.toString(16)
						];
						$.each(hex, function (nr, val) {
							if (val.length == 1) {
								hex[nr] = '0' + val;
							}
						});
						return hex.join('');
					},
					HSBToHex = function (hsb) {
						return RGBToHex(HSBToRGB(hsb));
					},
					restoreOriginal = function () {
						var cal = $(this).parent();
						var col = cal.data('colorpicker').origColor;
						cal.data('colorpicker').color = col;
						fillRGBFields(col, cal.get(0));
						fillHexFields(col, cal.get(0));
						fillHSBFields(col, cal.get(0));
						setSelector(col, cal.get(0));
						setHue(col, cal.get(0));
						setNewColor(col, cal.get(0));
					};
				return {
					init: function (opt) {
						opt = $.extend({}, defaults, opt||{});
						if (typeof opt.color == 'string') {
							opt.color = HexToHSB(opt.color);
						} else if (opt.color.r != undefined && opt.color.g != undefined && opt.color.b != undefined) {
							opt.color = RGBToHSB(opt.color);
						} else if (opt.color.h != undefined && opt.color.s != undefined && opt.color.b != undefined) {
							opt.color = fixHSB(opt.color);
						} else {
							return this;
						}
						return this.each(function () {
							if (!$(this).data('colorpickerId')) {
								var options = $.extend({}, opt);
								options.origColor = opt.color;
								var id = 'collorpicker_' + parseInt(Math.random() * 1000);
								$(this).data('colorpickerId', id);
								var cal = $(tpl).attr('id', id);
								if (options.flat) {
									cal.appendTo(this).show();
								} else {
									cal.appendTo(document.body);
								}
								options.fields = cal
													.find('input')
														.bind('keyup', keyDown)
														.bind('change', change)
														.bind('blur', blur)
														.bind('focus', focus);
								cal
									.find('span').bind('mousedown', downIncrement).end()
									.find('>div.colorpicker_current_color').bind('click', restoreOriginal);
								options.selector = cal.find('div.colorpicker_color').bind('mousedown', downSelector);
								options.selectorIndic = options.selector.find('div div');
								options.el = this;
								options.hue = cal.find('div.colorpicker_hue div');
								cal.find('div.colorpicker_hue').bind('mousedown', downHue);
								options.newColor = cal.find('div.colorpicker_new_color');
								options.currentColor = cal.find('div.colorpicker_current_color');
								cal.data('colorpicker', options);
								cal.find('div.colorpicker_submit')
									.bind('mouseenter', enterSubmit)
									.bind('mouseleave', leaveSubmit)
									.bind('click', clickSubmit);
								fillRGBFields(options.color, cal.get(0));
								fillHSBFields(options.color, cal.get(0));
								fillHexFields(options.color, cal.get(0));
								setHue(options.color, cal.get(0));
								setSelector(options.color, cal.get(0));
								setCurrentColor(options.color, cal.get(0));
								setNewColor(options.color, cal.get(0));
								if (options.flat) {
									cal.css({
										position: 'relative',
										display: 'block'
									});
								} else {
									$(this).bind(options.eventName, show);
								}
							}
						});
					},
					showPicker: function() {
						return this.each( function () {
							if ($(this).data('colorpickerId')) {
								show.apply(this);
							}
						});
					},
					hidePicker: function() {
						return this.each( function () {
							if ($(this).data('colorpickerId')) {
								$('#' + $(this).data('colorpickerId')).hide();
							}
						});
					},
					setColor: function(col) {
						if (typeof col == 'string') {
							col = HexToHSB(col);
						} else if (col.r != undefined && col.g != undefined && col.b != undefined) {
							col = RGBToHSB(col);
						} else if (col.h != undefined && col.s != undefined && col.b != undefined) {
							col = fixHSB(col);
						} else {
							return this;
						}
						return this.each(function(){
							if ($(this).data('colorpickerId')) {
								var cal = $('#' + $(this).data('colorpickerId'));
								cal.data('colorpicker').color = col;
								cal.data('colorpicker').origColor = col;
								fillRGBFields(col, cal.get(0));
								fillHSBFields(col, cal.get(0));
								fillHexFields(col, cal.get(0));
								setHue(col, cal.get(0));
								setSelector(col, cal.get(0));
								setCurrentColor(col, cal.get(0));
								setNewColor(col, cal.get(0));
							}
						});
					}
				};
			}();
			$.fn.extend({
				ColorPicker: ColorPicker.init,
				ColorPickerHide: ColorPicker.hidePicker,
				ColorPickerShow: ColorPicker.showPicker,
				ColorPickerSetColor: ColorPicker.setColor
			});
		})(jQuery)
		</script>
		<script src="scripts/functions.js"></script>
		<script src="scripts/vars.js"></script>
		<script src="scripts/actions.js"></script>
		<title>Cubin</title>
	</head>
	<body>
		<div class="g-frame">
			
		</div>
		<div class="g-panel">
			<div class="gp-color"></div><br />
			<div class="gp-button">
				<span onClick="saveImg()">Save</span>
				<span onClick="clearImg()">Clear</span>
				<span onClick="if(editImage == false)
				{
					if(imagePlayStarted !== false)
					{
						clearInterval(imagePlayStarted);
					}
					imagesStarted = true;startImage = 0;
					$('.gp-frame').attr('disabled', 'disabled');
					$('.gp-select').attr('disabled', 'disabled');
					startPlayImage();
				}
				else
				{
					alert('Vous êtes entrain d\'éditer une image, valider votre édition avant d\'effectuer cette action.');
				}">Play</span>
				<span onClick="if(editImage == false)
				{
					imagesStarted = false;
					$('.gp-frame').removeAttr('disabled');
					$('.gp-select').removeAttr('disabled');
					clearInterval(imagePlayStarted);
				}
				else
				{
					alert('Vous êtes entrain d\'éditer une image, valider votre édition avant d\'effectuer cette action.');
				}">Pause</span>
			</div>
			<div class="gp-title">Vitesse</div>
			<div class="gp-speed"><input type="range" name="points" min="0" max="100" value="50"/></div>
			<input type="text" class="gp-new" placeholder="Nouveau"/>
			<input type="number" class="gp-pixels" min="0" max="100" placeholder="Nb pixels X : 10" onChange="if(parseInt($(this).val())>100){$(this).val(100);}"/>
			<input type="file" class="gp-import" id="gp-import"/>
			<div class="gp-new_submit" onClick="addElement();">Ajouter</div>
			<select class="gp-select"></select>
			<div class="gp-button">
				<span onClick="if(newName = prompt('Nouveau nom :')){
					if(newName !== '')
					{
						liste = JSON.parse(lcGet('liste_name'));
						liste[elementSelect]['name'] = newName;
						liste = JSON.stringify(liste);
						lcAdd('liste_name', liste);
						setListe();
					}
				}">Renomer</span>
				<span onClick="deleteElement()">Delete</span>
				<span onClick="downloadElement()" style="width:356px">Download</span>
			</div>
			<select class="gp-frame"></select>
			<div class="gp-button">
				<span onClick="edidtFrame();" class="gpb-edit">Edit</span>
				<span onClick="editImage = 'annuler';edidtFrame();" class="gpb-annuler" style="display:none;">Annuler</span>
				<span onClick="deleteImage()" class="gpb-delete">Delete</span>
			</div>
		</div>
	</body>
</html>